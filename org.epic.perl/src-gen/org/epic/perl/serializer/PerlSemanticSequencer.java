/*
 * generated by Xtext 2.10.0-SNAPSHOT
 */
package org.epic.perl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.epic.perl.perl.BacktickQuoteLikeToken;
import org.epic.perl.perl.CommandQuoteLikeToken;
import org.epic.perl.perl.DataToken;
import org.epic.perl.perl.EndToken;
import org.epic.perl.perl.NumberToken;
import org.epic.perl.perl.OperatorToken;
import org.epic.perl.perl.PerlDocument;
import org.epic.perl.perl.PerlPackage;
import org.epic.perl.perl.PodToken;
import org.epic.perl.perl.QuoteToken;
import org.epic.perl.perl.ReadLineQuoteLikeToken;
import org.epic.perl.perl.RegexpQuoteLikeToken;
import org.epic.perl.perl.SymbolToken;
import org.epic.perl.perl.WordToken;
import org.epic.perl.perl.WordsQuoteLikeToken;
import org.epic.perl.services.PerlGrammarAccess;

@SuppressWarnings("all")
public class PerlSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private PerlGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == PerlPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case PerlPackage.BACKTICK_QUOTE_LIKE_TOKEN:
				sequence_QuoteLikeToken(context, (BacktickQuoteLikeToken) semanticObject); 
				return; 
			case PerlPackage.COMMAND_QUOTE_LIKE_TOKEN:
				sequence_QuoteLikeToken(context, (CommandQuoteLikeToken) semanticObject); 
				return; 
			case PerlPackage.DATA_TOKEN:
				sequence_Token(context, (DataToken) semanticObject); 
				return; 
			case PerlPackage.END_TOKEN:
				sequence_Token(context, (EndToken) semanticObject); 
				return; 
			case PerlPackage.NUMBER_TOKEN:
				sequence_Token(context, (NumberToken) semanticObject); 
				return; 
			case PerlPackage.OPERATOR_TOKEN:
				sequence_Token(context, (OperatorToken) semanticObject); 
				return; 
			case PerlPackage.PERL_DOCUMENT:
				sequence_PerlDocument(context, (PerlDocument) semanticObject); 
				return; 
			case PerlPackage.POD_TOKEN:
				sequence_Token(context, (PodToken) semanticObject); 
				return; 
			case PerlPackage.QUOTE_TOKEN:
				sequence_Token(context, (QuoteToken) semanticObject); 
				return; 
			case PerlPackage.READ_LINE_QUOTE_LIKE_TOKEN:
				sequence_QuoteLikeToken(context, (ReadLineQuoteLikeToken) semanticObject); 
				return; 
			case PerlPackage.REGEXP_QUOTE_LIKE_TOKEN:
				sequence_QuoteLikeToken(context, (RegexpQuoteLikeToken) semanticObject); 
				return; 
			case PerlPackage.SYMBOL_TOKEN:
				sequence_Token(context, (SymbolToken) semanticObject); 
				return; 
			case PerlPackage.WORD_TOKEN:
				sequence_Token(context, (WordToken) semanticObject); 
				return; 
			case PerlPackage.WORDS_QUOTE_LIKE_TOKEN:
				sequence_QuoteLikeToken(context, (WordsQuoteLikeToken) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     PerlDocument returns PerlDocument
	 *
	 * Constraint:
	 *     elements+=Element*
	 */
	protected void sequence_PerlDocument(ISerializationContext context, PerlDocument semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Element returns BacktickQuoteLikeToken
	 *     Token returns BacktickQuoteLikeToken
	 *     QuoteLikeToken returns BacktickQuoteLikeToken
	 *
	 * Constraint:
	 *     content=BACKTICK_STRING
	 */
	protected void sequence_QuoteLikeToken(ISerializationContext context, BacktickQuoteLikeToken semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PerlPackage.Literals.TOKEN__CONTENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PerlPackage.Literals.TOKEN__CONTENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getQuoteLikeTokenAccess().getContentBACKTICK_STRINGTerminalRuleCall_0_1_0(), semanticObject.getContent());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Element returns CommandQuoteLikeToken
	 *     Token returns CommandQuoteLikeToken
	 *     QuoteLikeToken returns CommandQuoteLikeToken
	 *
	 * Constraint:
	 *     content=COMMAND_QUOTE_LIKE
	 */
	protected void sequence_QuoteLikeToken(ISerializationContext context, CommandQuoteLikeToken semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PerlPackage.Literals.TOKEN__CONTENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PerlPackage.Literals.TOKEN__CONTENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getQuoteLikeTokenAccess().getContentCOMMAND_QUOTE_LIKETerminalRuleCall_2_1_0(), semanticObject.getContent());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Element returns ReadLineQuoteLikeToken
	 *     Token returns ReadLineQuoteLikeToken
	 *     QuoteLikeToken returns ReadLineQuoteLikeToken
	 *
	 * Constraint:
	 *     content=READLINE_QUOTE
	 */
	protected void sequence_QuoteLikeToken(ISerializationContext context, ReadLineQuoteLikeToken semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PerlPackage.Literals.TOKEN__CONTENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PerlPackage.Literals.TOKEN__CONTENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getQuoteLikeTokenAccess().getContentREADLINE_QUOTETerminalRuleCall_4_1_0(), semanticObject.getContent());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Element returns RegexpQuoteLikeToken
	 *     Token returns RegexpQuoteLikeToken
	 *     QuoteLikeToken returns RegexpQuoteLikeToken
	 *
	 * Constraint:
	 *     content=REGEX_QUOTE
	 */
	protected void sequence_QuoteLikeToken(ISerializationContext context, RegexpQuoteLikeToken semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PerlPackage.Literals.TOKEN__CONTENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PerlPackage.Literals.TOKEN__CONTENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getQuoteLikeTokenAccess().getContentREGEX_QUOTETerminalRuleCall_3_1_0(), semanticObject.getContent());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Element returns WordsQuoteLikeToken
	 *     Token returns WordsQuoteLikeToken
	 *     QuoteLikeToken returns WordsQuoteLikeToken
	 *
	 * Constraint:
	 *     content=WORDS_QUOTE_LIKE
	 */
	protected void sequence_QuoteLikeToken(ISerializationContext context, WordsQuoteLikeToken semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PerlPackage.Literals.TOKEN__CONTENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PerlPackage.Literals.TOKEN__CONTENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getQuoteLikeTokenAccess().getContentWORDS_QUOTE_LIKETerminalRuleCall_1_1_0(), semanticObject.getContent());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Element returns DataToken
	 *     Token returns DataToken
	 *
	 * Constraint:
	 *     content=DATA
	 */
	protected void sequence_Token(ISerializationContext context, DataToken semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PerlPackage.Literals.TOKEN__CONTENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PerlPackage.Literals.TOKEN__CONTENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTokenAccess().getContentDATATerminalRuleCall_10_1_0(), semanticObject.getContent());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Element returns EndToken
	 *     Token returns EndToken
	 *
	 * Constraint:
	 *     content=END
	 */
	protected void sequence_Token(ISerializationContext context, EndToken semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PerlPackage.Literals.TOKEN__CONTENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PerlPackage.Literals.TOKEN__CONTENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTokenAccess().getContentENDTerminalRuleCall_11_1_0(), semanticObject.getContent());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Element returns NumberToken
	 *     Token returns NumberToken
	 *
	 * Constraint:
	 *     content=Number
	 */
	protected void sequence_Token(ISerializationContext context, NumberToken semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PerlPackage.Literals.TOKEN__CONTENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PerlPackage.Literals.TOKEN__CONTENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTokenAccess().getContentNumberParserRuleCall_1_1_0(), semanticObject.getContent());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Element returns OperatorToken
	 *     Token returns OperatorToken
	 *
	 * Constraint:
	 *     (content=FileTestOperator | content=Operator)
	 */
	protected void sequence_Token(ISerializationContext context, OperatorToken semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Element returns PodToken
	 *     Token returns PodToken
	 *
	 * Constraint:
	 *     content=POD
	 */
	protected void sequence_Token(ISerializationContext context, PodToken semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PerlPackage.Literals.TOKEN__CONTENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PerlPackage.Literals.TOKEN__CONTENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTokenAccess().getContentPODTerminalRuleCall_0_1_0(), semanticObject.getContent());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Element returns QuoteToken
	 *     Token returns QuoteToken
	 *
	 * Constraint:
	 *     (content=STRING | content=INTERPOLATE | content=LITERAL)
	 */
	protected void sequence_Token(ISerializationContext context, QuoteToken semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Element returns SymbolToken
	 *     Token returns SymbolToken
	 *
	 * Constraint:
	 *     content=SYMBOL
	 */
	protected void sequence_Token(ISerializationContext context, SymbolToken semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PerlPackage.Literals.TOKEN__CONTENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PerlPackage.Literals.TOKEN__CONTENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTokenAccess().getContentSYMBOLTerminalRuleCall_3_1_0(), semanticObject.getContent());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Element returns WordToken
	 *     Token returns WordToken
	 *
	 * Constraint:
	 *     content=Word
	 */
	protected void sequence_Token(ISerializationContext context, WordToken semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PerlPackage.Literals.TOKEN__CONTENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PerlPackage.Literals.TOKEN__CONTENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTokenAccess().getContentWordParserRuleCall_2_1_0(), semanticObject.getContent());
		feeder.finish();
	}
	
	
}
