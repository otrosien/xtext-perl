/**
 * generated by Xtext 2.10.0-SNAPSHOT
 */
package org.epic.perl.perl.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.epic.perl.perl.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class PerlFactoryImpl extends EFactoryImpl implements PerlFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static PerlFactory init()
  {
    try
    {
      PerlFactory thePerlFactory = (PerlFactory)EPackage.Registry.INSTANCE.getEFactory(PerlPackage.eNS_URI);
      if (thePerlFactory != null)
      {
        return thePerlFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new PerlFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PerlFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case PerlPackage.PERL_DOCUMENT: return createPerlDocument();
      case PerlPackage.ELEMENT: return createElement();
      case PerlPackage.NODE: return createNode();
      case PerlPackage.STATEMENT_NODE: return createStatementNode();
      case PerlPackage.BLOCK_STATEMENT: return createBlockStatement();
      case PerlPackage.EXPRESSION_STATEMENT: return createExpressionStatement();
      case PerlPackage.STRUCTURE_NODE: return createStructureNode();
      case PerlPackage.PACKAGE_STATEMENT: return createPackageStatement();
      case PerlPackage.INCLUDE_STATEMENT: return createIncludeStatement();
      case PerlPackage.REQUIRE_INCLUDE: return createRequireInclude();
      case PerlPackage.USE_INCLUDE: return createUseInclude();
      case PerlPackage.SUB_STATEMENT: return createSubStatement();
      case PerlPackage.BLOCK_STRUCTURE: return createBlockStructure();
      case PerlPackage.TOKEN: return createToken();
      case PerlPackage.QUOTE_TOKEN: return createQuoteToken();
      case PerlPackage.REGEX_TOKEN: return createRegexToken();
      case PerlPackage.QUOTE_LIKE_TOKEN: return createQuoteLikeToken();
      case PerlPackage.POD_TOKEN: return createPodToken();
      case PerlPackage.NUMBER_TOKEN: return createNumberToken();
      case PerlPackage.WORD_TOKEN: return createWordToken();
      case PerlPackage.SYMBOL_TOKEN: return createSymbolToken();
      case PerlPackage.OPERATOR_TOKEN: return createOperatorToken();
      case PerlPackage.DATA_TOKEN: return createDataToken();
      case PerlPackage.END_TOKEN: return createEndToken();
      case PerlPackage.BACKTICK_QUOTE_LIKE_TOKEN: return createBacktickQuoteLikeToken();
      case PerlPackage.WORDS_QUOTE_LIKE_TOKEN: return createWordsQuoteLikeToken();
      case PerlPackage.COMMAND_QUOTE_LIKE_TOKEN: return createCommandQuoteLikeToken();
      case PerlPackage.REGEXP_QUOTE_LIKE_TOKEN: return createRegexpQuoteLikeToken();
      case PerlPackage.READ_LINE_QUOTE_LIKE_TOKEN: return createReadLineQuoteLikeToken();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PerlDocument createPerlDocument()
  {
    PerlDocumentImpl perlDocument = new PerlDocumentImpl();
    return perlDocument;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Element createElement()
  {
    ElementImpl element = new ElementImpl();
    return element;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Node createNode()
  {
    NodeImpl node = new NodeImpl();
    return node;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StatementNode createStatementNode()
  {
    StatementNodeImpl statementNode = new StatementNodeImpl();
    return statementNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BlockStatement createBlockStatement()
  {
    BlockStatementImpl blockStatement = new BlockStatementImpl();
    return blockStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExpressionStatement createExpressionStatement()
  {
    ExpressionStatementImpl expressionStatement = new ExpressionStatementImpl();
    return expressionStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StructureNode createStructureNode()
  {
    StructureNodeImpl structureNode = new StructureNodeImpl();
    return structureNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PackageStatement createPackageStatement()
  {
    PackageStatementImpl packageStatement = new PackageStatementImpl();
    return packageStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IncludeStatement createIncludeStatement()
  {
    IncludeStatementImpl includeStatement = new IncludeStatementImpl();
    return includeStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RequireInclude createRequireInclude()
  {
    RequireIncludeImpl requireInclude = new RequireIncludeImpl();
    return requireInclude;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UseInclude createUseInclude()
  {
    UseIncludeImpl useInclude = new UseIncludeImpl();
    return useInclude;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SubStatement createSubStatement()
  {
    SubStatementImpl subStatement = new SubStatementImpl();
    return subStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BlockStructure createBlockStructure()
  {
    BlockStructureImpl blockStructure = new BlockStructureImpl();
    return blockStructure;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Token createToken()
  {
    TokenImpl token = new TokenImpl();
    return token;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public QuoteToken createQuoteToken()
  {
    QuoteTokenImpl quoteToken = new QuoteTokenImpl();
    return quoteToken;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RegexToken createRegexToken()
  {
    RegexTokenImpl regexToken = new RegexTokenImpl();
    return regexToken;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public QuoteLikeToken createQuoteLikeToken()
  {
    QuoteLikeTokenImpl quoteLikeToken = new QuoteLikeTokenImpl();
    return quoteLikeToken;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PodToken createPodToken()
  {
    PodTokenImpl podToken = new PodTokenImpl();
    return podToken;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NumberToken createNumberToken()
  {
    NumberTokenImpl numberToken = new NumberTokenImpl();
    return numberToken;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public WordToken createWordToken()
  {
    WordTokenImpl wordToken = new WordTokenImpl();
    return wordToken;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SymbolToken createSymbolToken()
  {
    SymbolTokenImpl symbolToken = new SymbolTokenImpl();
    return symbolToken;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OperatorToken createOperatorToken()
  {
    OperatorTokenImpl operatorToken = new OperatorTokenImpl();
    return operatorToken;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DataToken createDataToken()
  {
    DataTokenImpl dataToken = new DataTokenImpl();
    return dataToken;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EndToken createEndToken()
  {
    EndTokenImpl endToken = new EndTokenImpl();
    return endToken;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BacktickQuoteLikeToken createBacktickQuoteLikeToken()
  {
    BacktickQuoteLikeTokenImpl backtickQuoteLikeToken = new BacktickQuoteLikeTokenImpl();
    return backtickQuoteLikeToken;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public WordsQuoteLikeToken createWordsQuoteLikeToken()
  {
    WordsQuoteLikeTokenImpl wordsQuoteLikeToken = new WordsQuoteLikeTokenImpl();
    return wordsQuoteLikeToken;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CommandQuoteLikeToken createCommandQuoteLikeToken()
  {
    CommandQuoteLikeTokenImpl commandQuoteLikeToken = new CommandQuoteLikeTokenImpl();
    return commandQuoteLikeToken;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RegexpQuoteLikeToken createRegexpQuoteLikeToken()
  {
    RegexpQuoteLikeTokenImpl regexpQuoteLikeToken = new RegexpQuoteLikeTokenImpl();
    return regexpQuoteLikeToken;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ReadLineQuoteLikeToken createReadLineQuoteLikeToken()
  {
    ReadLineQuoteLikeTokenImpl readLineQuoteLikeToken = new ReadLineQuoteLikeTokenImpl();
    return readLineQuoteLikeToken;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PerlPackage getPerlPackage()
  {
    return (PerlPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static PerlPackage getPackage()
  {
    return PerlPackage.eINSTANCE;
  }

} //PerlFactoryImpl
