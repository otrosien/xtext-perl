/**
 * generated by Xtext 2.9.1
 */
package org.epic.perl.perl.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import org.epic.perl.perl.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see org.epic.perl.perl.PerlPackage
 * @generated
 */
public class PerlAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static PerlPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PerlAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = PerlPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PerlSwitch<Adapter> modelSwitch =
    new PerlSwitch<Adapter>()
    {
      @Override
      public Adapter casePExpression(PExpression object)
      {
        return createPExpressionAdapter();
      }
      @Override
      public Adapter casePAssignment(PAssignment object)
      {
        return createPAssignmentAdapter();
      }
      @Override
      public Adapter casePBinaryOperation(PBinaryOperation object)
      {
        return createPBinaryOperationAdapter();
      }
      @Override
      public Adapter casePUnaryOperation(PUnaryOperation object)
      {
        return createPUnaryOperationAdapter();
      }
      @Override
      public Adapter casePPostfixOperation(PPostfixOperation object)
      {
        return createPPostfixOperationAdapter();
      }
      @Override
      public Adapter casePClosure(PClosure object)
      {
        return createPClosureAdapter();
      }
      @Override
      public Adapter casePBlockExpression(PBlockExpression object)
      {
        return createPBlockExpressionAdapter();
      }
      @Override
      public Adapter casePIfExpression(PIfExpression object)
      {
        return createPIfExpressionAdapter();
      }
      @Override
      public Adapter casePVariableDeclaration(PVariableDeclaration object)
      {
        return createPVariableDeclarationAdapter();
      }
      @Override
      public Adapter casePConstructorCall(PConstructorCall object)
      {
        return createPConstructorCallAdapter();
      }
      @Override
      public Adapter casePNumberLiteral(PNumberLiteral object)
      {
        return createPNumberLiteralAdapter();
      }
      @Override
      public Adapter casePNullLiteral(PNullLiteral object)
      {
        return createPNullLiteralAdapter();
      }
      @Override
      public Adapter casePReturnExpression(PReturnExpression object)
      {
        return createPReturnExpressionAdapter();
      }
      @Override
      public Adapter casePStringLiteral(PStringLiteral object)
      {
        return createPStringLiteralAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link org.epic.perl.perl.PExpression <em>PExpression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.epic.perl.perl.PExpression
   * @generated
   */
  public Adapter createPExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.epic.perl.perl.PAssignment <em>PAssignment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.epic.perl.perl.PAssignment
   * @generated
   */
  public Adapter createPAssignmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.epic.perl.perl.PBinaryOperation <em>PBinary Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.epic.perl.perl.PBinaryOperation
   * @generated
   */
  public Adapter createPBinaryOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.epic.perl.perl.PUnaryOperation <em>PUnary Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.epic.perl.perl.PUnaryOperation
   * @generated
   */
  public Adapter createPUnaryOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.epic.perl.perl.PPostfixOperation <em>PPostfix Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.epic.perl.perl.PPostfixOperation
   * @generated
   */
  public Adapter createPPostfixOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.epic.perl.perl.PClosure <em>PClosure</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.epic.perl.perl.PClosure
   * @generated
   */
  public Adapter createPClosureAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.epic.perl.perl.PBlockExpression <em>PBlock Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.epic.perl.perl.PBlockExpression
   * @generated
   */
  public Adapter createPBlockExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.epic.perl.perl.PIfExpression <em>PIf Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.epic.perl.perl.PIfExpression
   * @generated
   */
  public Adapter createPIfExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.epic.perl.perl.PVariableDeclaration <em>PVariable Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.epic.perl.perl.PVariableDeclaration
   * @generated
   */
  public Adapter createPVariableDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.epic.perl.perl.PConstructorCall <em>PConstructor Call</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.epic.perl.perl.PConstructorCall
   * @generated
   */
  public Adapter createPConstructorCallAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.epic.perl.perl.PNumberLiteral <em>PNumber Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.epic.perl.perl.PNumberLiteral
   * @generated
   */
  public Adapter createPNumberLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.epic.perl.perl.PNullLiteral <em>PNull Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.epic.perl.perl.PNullLiteral
   * @generated
   */
  public Adapter createPNullLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.epic.perl.perl.PReturnExpression <em>PReturn Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.epic.perl.perl.PReturnExpression
   * @generated
   */
  public Adapter createPReturnExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.epic.perl.perl.PStringLiteral <em>PString Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.epic.perl.perl.PStringLiteral
   * @generated
   */
  public Adapter createPStringLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //PerlAdapterFactory
