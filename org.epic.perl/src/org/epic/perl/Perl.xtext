grammar org.epic.perl.Perl hidden(WS, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate perl "http://www.epic.org/perl/Perl"

PerlDocument:
    {PerlDocument}
    elements += Element*
;

Element:
    Node 
    | Token
;

Node:
    StatementNode
    | StructureNode
;

StatementNode:
        BlockStatement
    |   ExpressionStatement
;

BlockStatement:
    SubBlock
    | LabelBlock
;

ExpressionStatement:
    ( PackageExpression
    | IncludeExpression
    | VariableExpression
//    | CompoundExpression
    | BreakExpression
//    | GivenExpression
//    | WhenExpression
//    | DataExpression
//    | EndExpression
//    | ExpressionExpression
//    | NullExpression
//    | UnmatchedBraceExpression
//    | UnknownExpression
    ) ';'
;

StructureNode:
    BlockStructure
//    | SubscriptStructure
    | ConstructorStructure
//    | ConditionStructure
//    | ListStructure
//    | ForStructure
//    | GivenStructure
//    | WhenStructure
//    | UnknownStructure
;

//ExpressionStatement:
//    
//;

PackageExpression:
    {PackageStatement}
    'package' name=QUALIFIED_ID version=VERSION?
;

IncludeExpression:
    RequireInclude
    | UseInclude
    | NoPragmaInclude
;

RequireInclude:
    'require' version=VERSION
;

UseInclude:
    {UseInclude}
    'use' (version=VERSION | (pragma=Pragma | Package=[PackageStatement|QUALIFIED_ID]) (stringArgument=QuoteToken | qwArgument=WORDS_QUOTE_LIKE )?)
;

NoPragmaInclude:
    {NoPragmaInclude}
    'no' pragma=Pragma (stringArgument=QuoteToken | qwArgument=WORDS_QUOTE_LIKE )?
;

/*
 * 
    attributes - get/set subroutine or variable attributes
    autodie - Replace functions with ones that succeed or die with lexical scope
    autouse - postpone load of modules until a function is used
    base - Establish an ISA relationship with base classes at compile time
    bigint - Transparent BigInteger support for Perl
    bignum - Transparent BigNumber support for Perl
    bigrat - Transparent BigNumber/BigRational support for Perl
    blib - Use MakeMaker's uninstalled version of a package
    bytes - Perl pragma to expose the individual bytes of characters
    charnames - access to Unicode character names and named character sequences; also define character names
    constant - Perl pragma to declare constants
    diagnostics - produce verbose warning diagnostics
    encoding - allows you to write your script in non-ASCII and non-UTF-8
    feature - Perl pragma to enable new features
    fields - compile-time class fields
    filetest - Perl pragma to control the filetest permission operators
    if - use a Perl module if a condition holds (also can no a module)
    integer - Perl pragma to use integer arithmetic instead of floating point
    less - perl pragma to request less of something
    lib - manipulate @INC at compile time
    locale - Perl pragma to use or avoid POSIX locales for built-in operations
    mro - Method Resolution Order
    open - perl pragma to set default PerlIO layers for input and output
    ops - Perl pragma to restrict unsafe operations when compiling
    overload - Package for overloading Perl operations
    overloading - perl pragma to lexically control overloading
    parent - Establish an ISA relationship with base classes at compile time
    re - Perl pragma to alter regular expression behaviour
    sigtrap - Perl pragma to enable simple signal handling
    sort - perl pragma to control sort() behaviour
    strict - Perl pragma to restrict unsafe constructs
    subs - Perl pragma to predeclare sub names
    threads - Perl interpreter-based threads
    threads::shared - Perl extension for sharing data structures between threads
    utf8 - Perl pragma to enable/disable UTF-8 (or UTF-EBCDIC) in source code
    vars - Perl pragma to predeclare global variable names
    vmsish - Perl pragma to control VMS-specific language features
    warnings - Perl pragma to control optional warnings
    warnings::register - warnings import function 
 */
Pragma:
    'attributes' | 'autodie' | 'autouse' | 'base' | 'bigint' | 'bignum' | 'bigrat' | 'blib' | 'bytes' | 
    'charnames' | 'constant' | 'diagnostics' | 'encoding' | 'feature' | 'fields' | 'filetest' | 'if' | 'integer' | 
    'less' | 'lib' | 'locale' | 'mro' | 'open' | 'ops' | 'overload' | 'overloading' | 'parent' | 're' | 'sigtrap' |
    'sort' | 'strict' | 'subs' | 'threads::shared' | 'threads' | 'utf8' | 'vars' | 'vmsish' | 'warnings::register' | 'warnings' 
;

VariableExpression:
    type=('my'|'our'|'local'|'state') (variable=Variable | '(' variables+=Variable (',' variables+=Variable)* ')' )
;

Variable:
    name=SYMBOL
;

BreakExpression:
    statement=('redo' | 'goto' | 'next' | 'last' | 'return') label=[LabelBlock]?
;

SubBlock:
    {SubBlock}
    'sub' name=ID prototype=Prototype? (block=BlockStructure | ';')
;

LabelBlock:
    label=ID ':' block=BlockStructure
;

BlockStructure:
    {BlockStructure} '{'
        elements += Element*
    '}'
;

ConstructorStructure:
    '[' (elements += Token ((','|'=>') elements += Token )*) ']'
;

//ConditionStructure:
//    {ConditionStructure} '(' condition=ExpressionExpression ')'
//;
//
//ExpressionExpression:
//    
//;

Prototype:
    '(' ('$'|'%'|'@'|'&'|';')* ')'
;

Token:
      {PodToken}       content=POD 
    | {NumberToken}    content=NUMBER
    | {WordToken}      content=Word
//    | DashedWord 
    | {SymbolToken}    content=SYMBOL
//    | ArrayIndex 
    | QuoteLikeToken 
    | {OperatorToken} content=FileTestOperator
    | {OperatorToken} content=Operator
    | QuoteToken
    | RegexToken
//    | HereDoc 
//    | Cast 
//    | Structure 
//    | {LabelToken}    content=LABEL
//    | Separator
    | {DataToken} content=DATA
    | {EndToken}  content=END
//    | Prototype
//    | Attribute 
//    | UnknownToken
;

QuoteToken:
    {QuoteToken} content=( STRING | INTERPOLATE | LITERAL )
;

RegexToken:
    {RegexToken} content=(REGEX_SUBSTITUTE | REGEX_TRANSLITERATE | REGEX_MATCH)
;

QuoteLikeToken:
    {BacktickQuoteLikeToken}   content=BACKTICK_STRING
    | {WordsQuoteLikeToken}    content=WORDS_QUOTE_LIKE
    | {CommandQuoteLikeToken}  content=COMMAND_QUOTE_LIKE
    | {RegexpQuoteLikeToken}   content=REGEX_QUOTE
      | {ReadLineQuoteLikeToken} content=READLINE_QUOTE
;

Word:
    Keyword
;

Keyword:
'abs' | 'accept' | 'alarm' | 'atan2' | 'bind' | 'binmode' | 'bless' | 'break' | 'caller' | 'chdir' | 'chmod' |
'chomp' | 'chop' | 'chown' | 'chr' | 'chroot' | 'close' | 'closedir' | 'connect' | 'continue' | 'cos' | 'crypt'
| 'dbmclose' | 'dbmopen' | 'default' | 'defined' | 'delete' | 'die' | 'do' | 'dump' | 'each' | 'else' | 'elsif' |
'endgrent' | 'endhostent' | 'endnetent' | 'endprotoent' | 'endpwent' | 'endservent' | 'eof' | 'eval' |
'evalbytes' | 'exec' | 'exists' | 'exit' | 'exp' | 'fc' | 'fcntl' | 'fileno' | 'flock' | 'for' | 'foreach' | 'fork' |
'format' | 'formline' | 'getc' | 'getgrent' | 'getgrgid' | 'getgrnam' | 'gethostbyaddr' | 'gethostbyname' |
'gethostent' | 'getlogin' | 'getnetbyaddr' | 'getnetbyname' | 'getnetent' | 'getpeername' | 'getpgrp' | 'getppid' |
'getpriority' | 'getprotobyname' | 'getprotobynumber' | 'getprotoent' | 'getpwent' | 'getpwnam' | 'getpwuid' |
'getservbyname' | 'getservbyport' | 'getservent' | 'getsockname' | 'getsockopt' | 'given' | 'glob' | 'gmtime' 
| 'grep' | 'hex' | 'if' | 'index' | 'int' | 'ioctl' | 'join' | 'keys' | 'kill' | 'lc' | 'lcfirst' |
'length' | 'link' | 'listen' | 'local' | 'localtime' | 'lock' | 'log' | 'lstat' | 'map' | 'mkdir' |
'msgctl' | 'msgget' | 'msgrcv' | 'msgsnd' | 'my' | 'no' | 'oct' | 'open' | 'opendir' |
'ord' | 'our' | 'pack' | 'package' | 'pipe' | 'pop' | 'pos' | 'print' | 'printf' | 'prototype' | 'push' |
'quotemeta' | 'rand' | 'read' | 'readdir' | 'readline' | 'readlink' | 'readpipe' | 'recv' 
| 'ref' | 'rename' | 'require' | 'reset' | 'return' | 'reverse' | 'rewinddir' | 'rindex' | 'rmdir' | 'say' |
'scalar' | 'seek' | 'seekdir' | 'select' | 'semctl' | 'semget' | 'semop' | 'send' | 'setgrent' | 'sethostent' |
'setnetent' | 'setpgrp' | 'setpriority' | 'setprotoent' | 'setpwent' | 'setservent' | 'setsockopt' | 'shift' | 'shmctl'
| 'shmget' | 'shmread' | 'shmwrite' | 'shutdown' | 'sin' | 'sleep' | 'socket' | 'socketpair' | 'sort' | 'splice' |
'split' | 'sprintf' | 'sqrt' | 'srand' | 'stat' | 'state' | 'study' | 'substr' | 'symlink' | 'syscall' |
'sysopen' | 'sysread' | 'sysseek' | 'system' | 'syswrite' | 'tell' | 'telldir' | 'tie' | 'tied' | 'time' | 'times' |
'tr' | 'truncate' | 'uc' | 'ucfirst' | 'umask' | 'undef' | 'unless' | 'unlink' | 'unpack' | 'unshift' | 'untie' |
'until' | 'use' | 'utime' | 'values' | 'vec' | 'wait' | 'waitpid' | 'wantarray' | 'warn' | 'when' | 'while' | 'write' |
'y'
;

/*
  # This is the list of valid operators
  ++   --   **   !    ~    +    -
  =~   !~   *    /    %    x
  <<   >>   lt   gt   le   ge   cmp  ~~
  ==   !=   <=>  .    ..   ...  ,
  &    |    ^    &&   ||   //
  ?    :    **=  +=   -=   .=   *=   /=
  %=   x=   &=   |=   ^=   <<=  >>=  &&=
  ||=  //=  <    >    <=   >=   <>   =>   ->
  and  or   xor  not  eq   ne
 */
Operator:
  '++' | '--' | '**' | '!' | '~' | '+' | '-' | '=~' | '!~' | '*' | '/' | '%' | 'x' | '<<' | '>>' | 'lt' | 'gt' | 'le' |
  'ge' | 'cmp' | '~~' | '==' | '!=' | '<=>' '.' | '..' | '...' | ',' | '&' | '|' | '^' | '&&' | '||' | '//' | '?' | ':'
  | '**=' | '+=' | '-=' | '.=' | '*=' | '/=' | '%=' | 'x=' | '&=' | '|=' | '^=' | '<<=' | '>>=' | '&&=' | '||=' | '//='
  | '<' | '>' | '<=' | '>=' | '<>' | '=>' | '->' | 'and' | 'or' | 'xor' | 'not' | 'eq' | 'ne'
;

FileTestOperator:
    ('-r' | '-w' | '-x' | '-o' | '-R' | '-W' | '-X' | '-O' | '-e' | '-z' | '-s' | '-f' | '-d' | '-l' | '-p' | '-S' | '-b' |
    '-c' | '-t' | '-u' | '-g' | '-k' | '-T' | '-B' | '-M' | '-A' | '-C')
;

QUALIFIED_ID:
    ID (('::'|"'") ID)*
;


terminal NUMBER:
    (HEX | BIN | INT) ('.' INT)?
;

terminal ID:
    ( 'a'..'z' | 'A'..'Z' | '_'  ) ( 'a'..'z' | 'A'..'Z' | '0'..'9' | '_' )*
;

terminal SYMBOL:
    ('$'|'%'|'@') ('a'..'z' | 'A'..'Z' | '_')+ (('::'|"'") ('a'..'z' | 'A'..'Z' | '_')+ )*
;

terminal VERSION:
    'v'? ('0'..'9')+ ('.' ('0'..'9')+ )*
;

terminal HEX:
    ("0x"|"0X") ('0'..'9'|'a'..'f'|'A'..'F'|'_')+ ;

terminal BIN:
    ("0b") ('0'..'1'|'_')+ ;

terminal INT: '0'..'9' ('0'..'9'|'_')*;

terminal STRING    : 
            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
;

terminal BACKTICK_STRING:
    '`'  !('`')* '`'
;

terminal INTERPOLATE:
    'qq' WS? (
        ('{' -> '}') |
        ('|' -> '|') |
        ('/' -> '/') |
        ('<' -> '>'))
;

terminal LITERAL:
    'q' WS? (
        ('{' -> '}') |
        ('(' -> ')') |
        ('|' -> '|') |
        ('/' -> '/') |
        ('<' -> '>'))
;

terminal WORDS_QUOTE_LIKE:
    'qw' WS? (
        ('{' -> '}') |
        ('(' -> ')') |
        ('|' -> '|') |
        ('/' -> '/') |
        ('<' -> '>')
    )
;

terminal COMMAND_QUOTE_LIKE:
    'qx' WS? (
        ('{' -> '}') |
        ('(' -> ')') |
        ('|' -> '|') |
        ('/' -> '/') |
        ('<' -> '>')
    )
;

terminal REGEX_QUOTE:
    'qr' WS? (
        ('{' -> '}') |
        ('|' -> '|') |
        ('/' -> '/') |
        ('<' -> '>')
    )
;


terminal REGEX_SUBSTITUTE:
    's' (
        ('|' -> '|' -> '|') |
        ('/' -> '/' -> '/')
    )
;

terminal REGEX_TRANSLITERATE:
    'tr' (
        ('|' -> '|' -> '|') |
        ('/' -> '/' -> '/')
    )
;


terminal REGEX_MATCH:
    'm' (
        ('|' -> '|') |
        ('/' -> '/')
    )
;

terminal READLINE_QUOTE:
    '<' ( ID | SYMBOL ) '>'    
;

terminal POD:
    '=pod' -> '=cut'
;

terminal DATA:
    '__DATA__' ANY_OTHER* EOF
;

terminal END:
    '__END__' ANY_OTHER* EOF
;

terminal SL_COMMENT     : '#' !('\n'|'\r')* ('\r'? '\n')?;

terminal WS            : (' '|'\t'|'\r'|'\n')+;

terminal ANY_OTHER: .;