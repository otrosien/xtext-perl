/*
 * generated by Xtext 2.9.1
 */
package org.epic.perl.tests

import com.google.inject.Inject
import org.eclipse.xtext.junit4.InjectWith
import org.eclipse.xtext.junit4.XtextRunner
import org.eclipse.xtext.junit4.util.ParseHelper
import org.eclipse.xtext.junit4.validation.ValidationTestHelper
import org.epic.perl.perl.Expression
import org.epic.perl.perl.NullLiteral
import org.epic.perl.perl.NumberLiteral
import org.epic.perl.perl.PerlModel
import org.epic.perl.perl.Plus
import org.epic.perl.perl.StringLiteral
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith
import org.epic.perl.services.PerlGrammarAccess.VariableRefElements

@RunWith(XtextRunner)
@InjectWith(PerlInjectorProvider)
class LiteralParserTest{

	@Inject
	extension ParseHelper<PerlModel>

	@Inject
	extension ValidationTestHelper

	@Test
	def void comment() {
		val result = parse('''
			# comment
			1
		''')
		assertNoErrors(result)
	}

	@Test
	def void stringLiteral() {
		val result = parse('''
			"10"
		''')
		result.assertNoErrors
		Assert.assertTrue(result.class.name, result instanceof PerlModel)
		val literal = (result as PerlModel).elements.get(0)
		Assert.assertTrue(literal.class.name, literal instanceof StringLiteral)
	}

	@Test
	def void stringLiteralSingleQuote() {
		val result = parse('''
			'test'
		''')
		result.assertNoErrors
		Assert.assertTrue(result.class.name, result instanceof PerlModel)
		val literal = (result as PerlModel).elements.get(0)
		Assert.assertTrue(literal.class.name, literal instanceof StringLiteral)
	}

	@Test
	def void nullLiteral() {
		val result = parse('''
			undef
		''')
		result.assertNoErrors
		Assert.assertTrue(result.class.name, result instanceof PerlModel)
		val literal = (result as PerlModel).elements.get(0)
		Assert.assertTrue(literal.class.name, literal instanceof NullLiteral)
	}

	@Test
	def void hexLiteral() {
		val result = parse('''
			0x10
		''')
		result.assertNoErrors
		Assert.assertTrue(result.class.name, result instanceof PerlModel)
		val literal = (result as PerlModel).elements.get(0)
		Assert.assertTrue(literal.class.name, literal instanceof NumberLiteral)
	}

	@Test
	def void numberLiteral() {
		val result = parse('''
			123.45
		''')
		result.assertNoErrors
		Assert.assertTrue(result.class.name, result instanceof PerlModel)
		val literal = (result as PerlModel).elements.get(0)
		Assert.assertTrue(literal.class.name, literal instanceof NumberLiteral)
	}
	
//	@Test
//	def void addition() {
//		val result = parse('''
//			1 + 2
//		''')
//		result.assertNoErrors
//		Assert.assertTrue(result.class.name, result instanceof PlusOrMinus)
//	}

//	@Test
//	def void ocalLiteral() {
//		val result = parse('''
//			07
//		''')
//		println(result)
//		Assert.assertNotNull(result)
//	}


}