/*
 * generated by Xtext 2.9.1
 */
package org.epic.perl.tests

import com.google.inject.Inject
import org.eclipse.xtext.junit4.InjectWith
import org.eclipse.xtext.junit4.XtextRunner
import org.eclipse.xtext.junit4.util.ParseHelper
import org.eclipse.xtext.junit4.validation.ValidationTestHelper
import org.epic.perl.perl.BacktickQuoteLikeToken
import org.epic.perl.perl.CommentToken
import org.epic.perl.perl.NumberToken
import org.epic.perl.perl.PerlModel
import org.epic.perl.perl.QuoteToken
import org.epic.perl.perl.WordToken
import org.epic.perl.perl.WordsQuoteLikeToken
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith

@RunWith(XtextRunner)
@InjectWith(PerlInjectorProvider)
class TokenParserTest{

	@Inject
	extension ParseHelper<PerlModel>

	@Inject
	extension ValidationTestHelper

	@Inject
	extension DumpUtil

	@Test
	def void commentToken() {
		val result = parse('''
			# comment
		''')
		assertNoErrors(result)
		println(result.dump)
		Assert.assertTrue(result.class.name, result instanceof PerlModel)
		val token = (result as PerlModel).elements.head
		Assert.assertTrue(token.class.name, token instanceof CommentToken)
	}

	@Test
	def void stringToken() {
		val result = parse('''
			"10"
		''')
		result.assertNoErrors
		println(result.dump)
		Assert.assertTrue(result.class.name, result instanceof PerlModel)
		val token = (result as PerlModel).elements.head
		Assert.assertTrue(token.class.name, token instanceof QuoteToken)
		Assert.assertEquals('10', (token as QuoteToken).content)
	}

	@Test
	def void singleQuoteStringToken() {
		val result = parse('''
			'test'
		''')
		result.assertNoErrors
		println(result.dump)
		Assert.assertTrue(result.class.name, result instanceof PerlModel)
		val token = (result as PerlModel).elements.head
		Assert.assertTrue(token.class.name, token instanceof QuoteToken)
		Assert.assertEquals('test', (token as QuoteToken).content)
	}

	@Test
	def void undefToken() {
		val result = parse('''
			undef
		''')
		result.assertNoErrors
		println(result.dump)
		Assert.assertTrue(result.class.name, result instanceof PerlModel)
		val token = (result as PerlModel).elements.head
		Assert.assertTrue(token.class.name, token instanceof WordToken)
		Assert.assertEquals('undef', (token as WordToken).content)
	}

	@Test
	def void numberToken() {
		val result = parse('''
			123.45
		''')
		result.assertNoErrors
		println(result.dump)
		Assert.assertTrue(result.class.name, result instanceof PerlModel)
		val token = (result as PerlModel).elements.head
		Assert.assertTrue(token.class.name, token instanceof NumberToken)
		Assert.assertEquals('123.45', (token as NumberToken).content)
	}

	@Test
	def void hexNumberToken() {
		val result = parse('''
			0x10
		''')
		result.assertNoErrors
		println(result.dump)
		Assert.assertTrue(result.class.name, result instanceof PerlModel)
		val token = (result as PerlModel).elements.head
		Assert.assertTrue(token.class.name, token instanceof NumberToken)
		Assert.assertEquals('0x10', (token as NumberToken).content)
	}

	@Test
	def void backtickQuoteLike() {
		val result = parse('''
			`abc`
		''')
		result.assertNoErrors
		println(result.dump)
		Assert.assertTrue(result.class.name, result instanceof PerlModel)
		val token = (result as PerlModel).elements.head
		Assert.assertTrue(token.class.name, token instanceof BacktickQuoteLikeToken)
		Assert.assertEquals('`abc`', (token as BacktickQuoteLikeToken).content)
	}
	
	@Test
	def void wordsQuoteLike() {
		val result = parse('''
			qw{a b c}
		''')
		result.assertNoErrors
		println(result.dump)
		Assert.assertTrue(result.class.name, result instanceof PerlModel)
		val token = (result as PerlModel).elements.head
		Assert.assertTrue(token.class.name, token instanceof WordsQuoteLikeToken)
		Assert.assertEquals('qw{a b c}', (token as WordsQuoteLikeToken).content)
	}
	
	@Test
	def void interpolateQuoteLike() {
		val result = parse('''
			qq{a b c}
		''')
		result.assertNoErrors
		println(result.dump)
		Assert.assertTrue(result.class.name, result instanceof PerlModel)
		val token = (result as PerlModel).elements.head
		Assert.assertTrue(token.class.name, token instanceof QuoteToken)
		Assert.assertEquals('qq{a b c}', (token as QuoteToken).content)
	}
}