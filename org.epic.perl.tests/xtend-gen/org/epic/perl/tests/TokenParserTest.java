/**
 * generated by Xtext 2.9.1
 */
package org.epic.perl.tests;

import com.google.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.junit4.InjectWith;
import org.eclipse.xtext.junit4.XtextRunner;
import org.eclipse.xtext.junit4.util.ParseHelper;
import org.eclipse.xtext.junit4.validation.ValidationTestHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.epic.perl.perl.AbstractElement;
import org.epic.perl.perl.BacktickQuoteLikeToken;
import org.epic.perl.perl.CommentToken;
import org.epic.perl.perl.NumberToken;
import org.epic.perl.perl.PerlModel;
import org.epic.perl.perl.QuoteToken;
import org.epic.perl.perl.WordToken;
import org.epic.perl.perl.WordsQuoteLikeToken;
import org.epic.perl.tests.DumpUtil;
import org.epic.perl.tests.PerlInjectorProvider;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(XtextRunner.class)
@InjectWith(PerlInjectorProvider.class)
@SuppressWarnings("all")
public class TokenParserTest {
  @Inject
  @Extension
  private ParseHelper<PerlModel> _parseHelper;
  
  @Inject
  @Extension
  private ValidationTestHelper _validationTestHelper;
  
  @Inject
  @Extension
  private DumpUtil _dumpUtil;
  
  @Test
  public void commentToken() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("# comment");
      _builder.newLine();
      final PerlModel result = this._parseHelper.parse(_builder);
      this._validationTestHelper.assertNoErrors(result);
      String _dump = this._dumpUtil.dump(result);
      InputOutput.<String>println(_dump);
      Class<? extends PerlModel> _class = result.getClass();
      String _name = _class.getName();
      Assert.assertTrue(_name, (result instanceof PerlModel));
      EList<AbstractElement> _elements = ((PerlModel) result).getElements();
      final AbstractElement token = IterableExtensions.<AbstractElement>head(_elements);
      Class<? extends AbstractElement> _class_1 = token.getClass();
      String _name_1 = _class_1.getName();
      Assert.assertTrue(_name_1, (token instanceof CommentToken));
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void stringToken() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("\"10\"");
      _builder.newLine();
      final PerlModel result = this._parseHelper.parse(_builder);
      this._validationTestHelper.assertNoErrors(result);
      String _dump = this._dumpUtil.dump(result);
      InputOutput.<String>println(_dump);
      Class<? extends PerlModel> _class = result.getClass();
      String _name = _class.getName();
      Assert.assertTrue(_name, (result instanceof PerlModel));
      EList<AbstractElement> _elements = ((PerlModel) result).getElements();
      final AbstractElement token = IterableExtensions.<AbstractElement>head(_elements);
      Class<? extends AbstractElement> _class_1 = token.getClass();
      String _name_1 = _class_1.getName();
      Assert.assertTrue(_name_1, (token instanceof QuoteToken));
      String _content = ((QuoteToken) token).getContent();
      Assert.assertEquals("10", _content);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void singleQuoteStringToken() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("\'test\'");
      _builder.newLine();
      final PerlModel result = this._parseHelper.parse(_builder);
      this._validationTestHelper.assertNoErrors(result);
      String _dump = this._dumpUtil.dump(result);
      InputOutput.<String>println(_dump);
      Class<? extends PerlModel> _class = result.getClass();
      String _name = _class.getName();
      Assert.assertTrue(_name, (result instanceof PerlModel));
      EList<AbstractElement> _elements = ((PerlModel) result).getElements();
      final AbstractElement token = IterableExtensions.<AbstractElement>head(_elements);
      Class<? extends AbstractElement> _class_1 = token.getClass();
      String _name_1 = _class_1.getName();
      Assert.assertTrue(_name_1, (token instanceof QuoteToken));
      String _content = ((QuoteToken) token).getContent();
      Assert.assertEquals("test", _content);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void undefToken() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("undef");
      _builder.newLine();
      final PerlModel result = this._parseHelper.parse(_builder);
      this._validationTestHelper.assertNoErrors(result);
      String _dump = this._dumpUtil.dump(result);
      InputOutput.<String>println(_dump);
      Class<? extends PerlModel> _class = result.getClass();
      String _name = _class.getName();
      Assert.assertTrue(_name, (result instanceof PerlModel));
      EList<AbstractElement> _elements = ((PerlModel) result).getElements();
      final AbstractElement token = IterableExtensions.<AbstractElement>head(_elements);
      Class<? extends AbstractElement> _class_1 = token.getClass();
      String _name_1 = _class_1.getName();
      Assert.assertTrue(_name_1, (token instanceof WordToken));
      String _content = ((WordToken) token).getContent();
      Assert.assertEquals("undef", _content);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void numberToken() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("123.45");
      _builder.newLine();
      final PerlModel result = this._parseHelper.parse(_builder);
      this._validationTestHelper.assertNoErrors(result);
      String _dump = this._dumpUtil.dump(result);
      InputOutput.<String>println(_dump);
      Class<? extends PerlModel> _class = result.getClass();
      String _name = _class.getName();
      Assert.assertTrue(_name, (result instanceof PerlModel));
      EList<AbstractElement> _elements = ((PerlModel) result).getElements();
      final AbstractElement token = IterableExtensions.<AbstractElement>head(_elements);
      Class<? extends AbstractElement> _class_1 = token.getClass();
      String _name_1 = _class_1.getName();
      Assert.assertTrue(_name_1, (token instanceof NumberToken));
      String _content = ((NumberToken) token).getContent();
      Assert.assertEquals("123.45", _content);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void hexNumberToken() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("0x10");
      _builder.newLine();
      final PerlModel result = this._parseHelper.parse(_builder);
      this._validationTestHelper.assertNoErrors(result);
      String _dump = this._dumpUtil.dump(result);
      InputOutput.<String>println(_dump);
      Class<? extends PerlModel> _class = result.getClass();
      String _name = _class.getName();
      Assert.assertTrue(_name, (result instanceof PerlModel));
      EList<AbstractElement> _elements = ((PerlModel) result).getElements();
      final AbstractElement token = IterableExtensions.<AbstractElement>head(_elements);
      Class<? extends AbstractElement> _class_1 = token.getClass();
      String _name_1 = _class_1.getName();
      Assert.assertTrue(_name_1, (token instanceof NumberToken));
      String _content = ((NumberToken) token).getContent();
      Assert.assertEquals("0x10", _content);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void backtickQuoteLike() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("`abc`");
      _builder.newLine();
      final PerlModel result = this._parseHelper.parse(_builder);
      this._validationTestHelper.assertNoErrors(result);
      String _dump = this._dumpUtil.dump(result);
      InputOutput.<String>println(_dump);
      Class<? extends PerlModel> _class = result.getClass();
      String _name = _class.getName();
      Assert.assertTrue(_name, (result instanceof PerlModel));
      EList<AbstractElement> _elements = ((PerlModel) result).getElements();
      final AbstractElement token = IterableExtensions.<AbstractElement>head(_elements);
      Class<? extends AbstractElement> _class_1 = token.getClass();
      String _name_1 = _class_1.getName();
      Assert.assertTrue(_name_1, (token instanceof BacktickQuoteLikeToken));
      String _content = ((BacktickQuoteLikeToken) token).getContent();
      Assert.assertEquals("`abc`", _content);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void wordsQuoteLike() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("qw{a b c}");
      _builder.newLine();
      final PerlModel result = this._parseHelper.parse(_builder);
      this._validationTestHelper.assertNoErrors(result);
      String _dump = this._dumpUtil.dump(result);
      InputOutput.<String>println(_dump);
      Class<? extends PerlModel> _class = result.getClass();
      String _name = _class.getName();
      Assert.assertTrue(_name, (result instanceof PerlModel));
      EList<AbstractElement> _elements = ((PerlModel) result).getElements();
      final AbstractElement token = IterableExtensions.<AbstractElement>head(_elements);
      Class<? extends AbstractElement> _class_1 = token.getClass();
      String _name_1 = _class_1.getName();
      Assert.assertTrue(_name_1, (token instanceof WordsQuoteLikeToken));
      String _content = ((WordsQuoteLikeToken) token).getContent();
      Assert.assertEquals("qw{a b c}", _content);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void interpolateQuoteLike() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("qq{a b c}");
      _builder.newLine();
      final PerlModel result = this._parseHelper.parse(_builder);
      this._validationTestHelper.assertNoErrors(result);
      String _dump = this._dumpUtil.dump(result);
      InputOutput.<String>println(_dump);
      Class<? extends PerlModel> _class = result.getClass();
      String _name = _class.getName();
      Assert.assertTrue(_name, (result instanceof PerlModel));
      EList<AbstractElement> _elements = ((PerlModel) result).getElements();
      final AbstractElement token = IterableExtensions.<AbstractElement>head(_elements);
      Class<? extends AbstractElement> _class_1 = token.getClass();
      String _name_1 = _class_1.getName();
      Assert.assertTrue(_name_1, (token instanceof QuoteToken));
      String _content = ((QuoteToken) token).getContent();
      Assert.assertEquals("qq{a b c}", _content);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
